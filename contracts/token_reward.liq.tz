parameter (or (contract (or unit (or (pair key_hash (pair (or unit (or string unit)) (pair (pair string (pair (pair timestamp timestamp) (pair (pair timestamp timestamp) (list string)))) (pair (pair (option key_hash) (pair tez (map nat nat))) (pair tez (pair (map nat tez) (pair (map nat (list (pair key_hash (pair nat tez)))) (pair (map key_hash nat) (map key_hash tez))))))))) unit)) (pair key_hash (pair (or unit (or string unit)) (pair (pair string (pair (pair timestamp timestamp) (pair (pair timestamp timestamp) (list string)))) (pair (pair (option key_hash) (pair tez (map nat nat))) (pair tez (pair (map nat tez) (pair (map nat (list (pair key_hash (pair nat tez)))) (pair (map key_hash nat) (map key_hash tez)))))))))) (or unit unit)); storage (pair key_hash (pair (map key_hash tez) (contract (or unit (or key_hash (or unit (pair key_hash nat)))) (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat))))))); return unit; code { DUP ; DIP { CDR ; } ; CAR ; DUP ; IF_LEFT { SWAP ; DROP ; SWAP ; SWAP ; PUSH tez "0" ; PUSH (or unit (or (pair key_hash (pair (or unit (or string unit)) (pair (pair string (pair (pair timestamp timestamp) (pair (pair timestamp timestamp) (list string)))) (pair (pair (option key_hash) (pair tez (map nat nat))) (pair tez (pair (map nat tez) (pair (map nat (list (pair key_hash (pair nat tez)))) (pair (map key_hash nat) (map key_hash tez))))))))) unit)) (Right (Right Unit)) ; TRANSFER_TOKENS ; DROP ; PUSH unit Unit ; PAIR ; } { IF_LEFT { SOURCE unit unit ; MANAGER ; DUUUUP ; CDAR ; DUUP ; GET ; IF_NONE { FAIL ; } { DIIP { DROP ; DROP ; } ; DUUUP ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUP ; DIIIIIP { DROP ; } ; CDAR ; PUSH (option tez) None ; DUUUUUUP ; DIIIIIIP { DROP ; } ; UPDATE ; PAIR ; SWAP ; PAIR ; SOURCE unit unit ; DUUUP ; DIIIP { DROP ; } ; PUSH unit Unit ; TRANSFER_TOKENS ; DROP ; PUSH unit Unit ; PAIR ; } ; } { DROP ; DROP ; DUP ; SWAP ; CDDR ; PUSH tez "0" ; PUSH (or unit (or key_hash (or unit (pair key_hash nat)))) (Right (Right (Left Unit))) ; TRANSFER_TOKENS ; DUP ; IF_LEFT { FAIL ; } { IF_LEFT { FAIL ; } { IF_LEFT { FAIL ; } { DUUUP ; LAMBDA (pair (pair (pair key_hash nat) nat) (pair key_hash (pair (map key_hash tez) (contract (or unit (or key_hash (or unit (pair key_hash nat)))) (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))))))) nat { DUP ; CAR ; { @x_slash_21 } DUP ; CAR ; CDR ; DUUP ; CDR ; DUUUUP ; CDR ; CAR ; DUUUUP ; CAR ; CAR ; COMPARE ; NEQ ; PUSH nat 100000 ; DUUUUP ; COMPARE ; GE ; AND ; IF { DUUP ; DUUP ; ADD ; } { DUP ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; } ; PAIR ; PUSH nat 0 ; DUUUP ; ITER { DIP { DUP ; } ; PAIR ; DUUUP ; DUUP ; DIP { DUP ; CAR ; SWAP ; CDR ; } ; PAIR ; EXEC ; DIP { DROP ; DROP ; } ; } ; LAMBDA (pair (pair (pair key_hash nat) (map key_hash tez)) nat) (map key_hash tez) { DUP ; CAR ; { @x_slash_31 } DUP ; CAR ; CAR ; DUUP ; CDR ; DUP ; PUSH nat 1000 ; AMOUNT ; DUUUUUUUP ; CDR ; { @all_shares_slash_29 } PUSH nat 1000 ; DUUUUUUUUP ; CAR ; CDR ; MUL ; EDIV ; IF_NONE { PUSH nat 0 ; } { CAR ; } ; MUL ; EDIV ; IF_NONE { PUSH tez "0" ; } { CAR ; } ; DUUUP ; DUUUUUP ; GET ; IF_NONE { PUSH tez "0" ; } {} ; DIIIP { DROP ; } ; DIIIIP { DROP ; DROP ; } ; ADD ; SOME ; DUUUP ; DIIIP { DROP ; } ; UPDATE ; } ; PAIR ; DUUUUUP ; DUP ; CAR ; SWAP ; CDR ; CDR ; DUUUUUUUP ; CDAR ; DUUUUUUP ; ITER { DIP { DUP ; } ; PAIR ; DUUUUUP ; DUUP ; DIP { DUP ; CAR ; SWAP ; CDR ; } ; PAIR ; EXEC ; DIP { DROP ; DROP ; } ; } ; DIIIP { DROP ; DROP ; DROP ; } ; PAIR ; SWAP ; PAIR ; PUSH unit Unit ; PAIR ; } ; } ; } ; DIP { DROP ; DROP ; } ; } ; } ; } 