parameter (or unit (or key_hash (or unit (pair key_hash nat)))); storage (pair (map key_hash nat) (pair nat (pair nat (pair string string)))); return (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))); code { DUP ; DIP { CDR ; } ; CAR ; DUP ; IF_LEFT { DROP ; DUUP ; DUUUP ; CDR ; LEFT (or nat (map key_hash nat)) ; RIGHT unit ; PAIR ; } { IF_LEFT { DUUUP ; DUUUUP ; CAR ; DUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; DIIP { DROP ; } ; LEFT (map key_hash nat) ; RIGHT (pair nat (pair nat (pair string string))) ; RIGHT unit ; PAIR ; } { IF_LEFT { DROP ; DUUP ; DUUUP ; CAR ; RIGHT nat ; RIGHT (pair nat (pair nat (pair string string))) ; RIGHT unit ; PAIR ; } { SOURCE unit unit ; MANAGER ; DUUP ; CAR ; DUUUP ; CDR ; DUP ; DUUUUUUUP ; CAR ; DUUUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; SUB ; DUP ; ABS ; SWAP ; GE ; IF { DUUUUUUUP ; CDR ; DUUUUUUUUP ; CAR ; DUUUP ; SOME ; DUUUUUUUP ; UPDATE ; DUUUUUUUUUP ; CAR ; DUUUUUUP ; GET ; IF_NONE { PUSH nat 0 ; } {} ; DIIIP { DROP ; } ; DUUUUP ; ADD ; SOME ; DUUUUUP ; UPDATE ; PAIR ; PUSH (or unit (or (pair nat (pair nat (pair string string))) (or nat (map key_hash nat)))) (Left Unit) ; PAIR ; } { FAIL ; } ; DIP { DROP ; DROP ; DROP ; DROP ; } ; } ; } ; } ; DIP { DROP ; DROP ; } ; } 